Inductive natlist :=
| nil : natlist
| cons : nat -> natlist -> natlist.

Notation "[]" := nil.
Notation "[ x ]" := (cons x nil).
Notation "[ x ; y ; .. ; z ]" := (cons x (cons y .. (cons z nil) ..)).
Notation "x :: xs" := (cons x xs).

Fixpoint length (xs:natlist): nat :=
match xs with
| [] => 0
| _::ys => S (length ys)
end.

Print option.

Fixpoint access (xs:natlist)(i:nat) : option nat :=
match xs, i with
| [], _ => None
| y::ys, 0 => Some y
| y::ys, S j => access ys j
end.

Fixpoint insert (x:nat)(xs:natlist) :natlist :=
match xs with
| [] => [x]
| y::ys => 